
                                                           substitute-if-not


    FUNCTION
    substitute-if-not  -  substitute new elements for ones that fail a test
      in a sequence

    Usage
    substitute-if-not NEWITEM PRED SEQUENCE [:key KEYFNC] [:count COUNT]
      [:from-end FE] [:start SN] [:end EN]

    DESCRIPTION
    Returns a copy of SEQUENCE with elements that do not satisfy a predicate
    replaced with NEWITEM.  The predicate PRED must accept one argument.  If
    PRED returns false when applied to an entry in SEQUENCE,  the  entry  is
    replaced.   If PRED returns true, the entry is not changed.  The type of
    NEWITEM must be appropriate for SEQUENCE.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number  of  items  changed.   No  more  than  the  value  of  COUNT
    occurrences of the item will be changed.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed in the reverse direction.  This argument defaults to nil.  It has
    no effect on the result unless :count is also specified.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  It  defaults  to  zero
    (the  first  element).  The :end keyword argument specifies an index one
    greater than the index of the last element to examine. A value of nil is
    equivalent to the default, the length of the sequence.  If SEQUENCE is a
    vector with a fill pointer, only the active elements of SEQUENCE can  be
    examined.

    EXAMPLES
    (substitute-if-not 2 #'atom '((a) (b) c d (e)))
      => (2 2 c d 2)
    (substitute-if-not 'a #'oddp '(1 2 3 4 5 6 7 8) :count 3)
      => (1 a 3 a 5 a 7 8)
    (substitute-if-not 'a #'evenp '(1 2 3 4 5 6 7) :count 2
      :from-end t) => (1 2 3 4 a 6 a)
    (substitute-if-not 'a #'oddp '(1 2 3 4 5 6 7 8 9)
      :start 2 :end 6) => (1 2 3 a 5 a 7 8 9)

    SEE ALSO
    CLtL 14:255, :end, :key, nsubst, nsubst-if, nsubstitute, nsubstitute-if,
    nsubstitute-if-not, nsubst-if-not, :start, subst, subst-if, subst-if-
    not, substitute, substitute-if



































































































































































































































































































































































































































































































































































































































