
                                                                  substitute


    FUNCTION
    substitute  -  substitute a new element for old ones in a sequence

    Usage
    substitute NEWITEM OLDITEM SEQUENCE [{:test | :test-not} PRED]
      [:key KEYFNC] [:count COUNT] [:from-end FE] [:start SN] [:end EN]

    DESCRIPTION
    Returns a copy of  SEQUENCE  after  substituting  all  elements  eql  to
    OLDITEM with NEWITEM.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of  the  :test or the :test-not keyword argument.  PRED must be a
    function that accepts two arguments (OLDITEM and an element of SEQUENCE,
    passed  in  that order).  If PRED is the value of :test, OLDITEM and the
    element match if PRED returns true.  If PRED is the value of  :test-not,
    OLDITEM  and the element match if PRED returns false.  It is an error to
    supply both :test and :test-not keyword arguments.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number  of elements replaced.  No more than that number of elements
    will be replaced.  If :count is nil or unspecified,  all  elements  that
    match OLDITEM will be replaced.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the  reverse  direction.  This argument defaults to nil.  It
    affects the result only if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be replaced.

    EXAMPLES
    (substitute 2 'd '(a b c d e d d)) => (a b c 2 e 2 2)
    (substitute 'a '(d) '(a b c (d) e (d) d) :test #'equal)
      => (a b c a e a d)
    (substitute 2 'd '(a b c d e d d) :count 2)
      => (a b c 2 e 2 d)
    (substitute 2 'd '(a b c d e d d) :count 2 :from-end t)
      => (a b c d e 2 2)
    (substitute 2 'd '(a b d b c d e d d) :start 2 :end 6)
      => (a b 2 b c 2 e d d)

    SEE ALSO
    CLtL 14:255, :key, nsubst, nsubst-if, nsubstitute, nsubstitute-if,
    nsubstitute-if-not, nsubst-if-not, :start, subst, subst-if, subst-if-
    not, substitute-if, substitute-if-not, :test-not





























































































































































































































































































































































































































































































































































































































