
                                                                      :start


    KEYWORD ARGUMENT
    :start  -  specify the beginning of a subsequence to be operated upon

    Usage
    :start INTEGER

    DESCRIPTION
    This keyword argument is used with many sequence-manipulation functions.
    Its  value  is  the  index  of the first element of the subsequence upon
    which the manipulation function is to act.  The default  value  of  this
    keyword  argument  is  zero.   Since  sequences use zero-origin indexing
    (that is, the first element is at index zero), the default value for the
    :start  keyword  argument  denotes  the  beginning of the sequence.  The
    :start keyword argument must be an non-negative integer  less  than  the
    length of the sequence.

    The :start keyword argument is normally used  in  conjunction  with  the
    :end  keyword  argument.  The value of the :end keyword argument denotes
    the first element after the subsequence.  Thus, the  subsequence  starts
    at  the  value  of  the  :start keyword argument and ends at the element
    before the value of the :end keyword argument.  Note that the  value  of
    the  :start  keyword argument must be less than or equal to the value of
    :end keyword argument.  (If the values are equal, the empty  subsequence
    results.) It is an error for the value of the :start keyword argument to
    be greater than the value of the :end keyword argument.  (The  :from-end
    keyword argument is used to process a sequence in the reverse order.)

    While effects similar to using the :start and :end keyword arguments can
    be  achieved  with  the function subseq, there are two important differ-
    ences.  When :start and :end arguments are used, all  indices  refer  to
    the  original sequence, while they refer to the subsequence if subseq is
    used.  And functions that return a sequence with elements modified (such
    as  substitute  and fill) return the entire sequence when the :start and
    :end keyword arguments specify the subsequence  (with  elements  outside
    the subsequence unchanged) and only the subsequence when subseq is used.

    When there are two sequence arguments (as in mismatch)  which  may  have
    subsequences  specified,  the keywords arguments are labeled :start1 and
    :start2, with the  :start1  keyword  argument  referring  to  the  first
    sequence  and  the  :start2  keyword  argument  referring  to the second
    sequence.

    This argument is also used with certain string  functions  (for  example
    string-capitalize)  in  the  same  way  it is used with general sequence
    functions.  The list of  functions  that  use  :start  (or  :start1  and
    :start2) is given below.

    EXAMPLES
    (fill '(0 1 2 3 4) 'a :start 1 :end 3) => (0 a a 3 4)
    (fill (subseq '(0 1 2 3 4) 1 3) 'a) => (a a)
    (fill '(0 1 2 3 4) 'a :end 3) => (a a a 3 4)
    (position 'a '(a 1 2 a 4) :start 1 :end 5) => 3
    (position 'a (subseq '(a 1 2 a 4) 1 5)) => 2

    SEE ALSO
    CLtL 14:246, count, count-if, count-if-not, delete, delete-duplicates,
    delete-if, delete-if-not, fill, find, find-if, find-if-not, make-
    string-input-stream, mismatch, nstring-capitalize, nstring-downcase,
    nstring-upcase, nsubstitute, nsubstitute-if, nsubstitute-if-not, parse-
    integer, parse-namestring, position, position-if, position-if-not,
    read-from-string, reduce, remove, remove-duplicates, remove-if, remove-
    if-not, replace, search, string-capitalize, string-downcase, string-
    equal, string-greaterp, string-lessp, string-not-greaterp, string-not-
    lessp, string-upcase, string/=, string>, string>=, string=, string<,
    string<=, subseq, substitute, substitute-if, substitute-if-not, with-
    input-from-string, write-line, write-string




















































































































































































































































































































































































































































































































































































































