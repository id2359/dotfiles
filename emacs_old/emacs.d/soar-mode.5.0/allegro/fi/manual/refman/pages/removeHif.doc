
                                                                   remove-if


    FUNCTION
    remove-if  -  remove all elements that satisfy a predicate from a copy
      of a sequence

    Usage
    remove-if PRED SEQUENCE [:key KEYFNC] [:count COUNT] [:from-end FE]
      [:start SN] [:end EN]

    DESCRIPTION
    Returns a copy of SEQUENCE from which all elements satisfying the predi-
    cate  PRED have been removed.  An element satisfies PRED if PRED applied
    to the element returns true.  PRED must accept one argument.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number  of  elements removed.  No more than that number of elements
    are deleted.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the reverse direction.  This argument defaults to nil.  This
    argument only affects the result if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (remove-if #'numberp '(a b c 4 e)) => (a b c e)
    (remove-if #'numberp '((a) (b) (c) (4) (e)) :key #'car)
      => ((a) (b) (c) (e))
    (remove-if #'evenp '(1 2 3 4 5 6) :count 2) => (1 3 5 6)
    (remove-if #'oddp '(1 2 3 4 5 6) :count 2 :from-end t)
      => (1 2 4 6)
    (remove-if #'oddp '(1 2 3 4 5 6) :start 1 :end 5)
      => (1 2 4 6)

    SEE ALSO
    CLtL 14:253, delete, delete-if, delete-if-not, delete-duplicates, :end,
    :key, remove, remove-duplicate, remove-if-not, :start






































































































































































































































































































































































































































































































































































































































