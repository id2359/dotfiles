
                                                         format directive ~$


    FORMAT DIRECTIVE
    ~$  -  print floating-point number in fixed-format suitable for dollar
      amounts

    USAGE
    ~cents,dollars,mincol,padchar[:][@]$

    DESCRIPTION
    Prints the next format argument as a floating-point number in  a  fixed-
    format  suitable  for printing dollars and cents, unless it is a complex
    number or a non-numeric object, in which case  the  format  ~MINCOLD  is
    used.   If  the  argument  is  rational,  the  value  printed is of type
    single-float.  Note that to print the components  of  a  complex  number
    using  this  directive,  the  real  and  imaginary parts must be printed
    separately using ``~$'' twice in the format control string with the real
    and imaginary parts as separate format arguments.

    The prefix parameters are summarized below.

         CENTS - number of digits after decimal point (default 2)
         DOLLARS - minimum number of digits before decimal point (default 1)
         MINCOL - minimum total field width (default 0)
         PADCHAR - fills out field on the left (default the space  character
         `` '')

    The argument is printed in a  field  of  at  least  MINCOL  (default  0)
    columns.   Enough  copies of PADCHAR (default the space character `` '')
    are added to the beginning of the output string, if  necessary,  to  pad
    the field on the left.  The sign, if printed, appears before any padding
    if the ``:'' modifier is given, and after the  padding  otherwise.   The
    sign  is printed only if the number is negative or if the ``@'' modifier
    is given.

    After possible padding and sign, the integral part of  the  argument  is
    printed  as a string of DOLLARS digits, with leading zeros if necessary,
    followed by a decimal point and then a string of CENTS digits represent-
    ing the rounded fractional part.

    If the argument is large enough that the number of  digits  required  is
    greater  than  both  100  and MINCOL, then the implementation is free to
    print it as if by using the exponential notation directive

         ~MINCOL,Q,,,,PADCHARE

    where Q is CENTS + DOLLARS - 1 (assuming default values  if  necessary),
    and  MINCOL  and PADCHAR are present or absent according to whether they
    are present or absent in the original directive.

    EXAMPLES
    (defun dtest (x)
      (format nil "~,3,9@$%~,3,9:@$%~4$%~$"
              x x x x x)) => dtest
    (dtest 12.34)    => "  +012.34%+  012.34%12.3400%12.34"
    (dtest 0.007)    => "  +000.01%+  000.01%0.0070%0.01"
    (dtest 1.23456)  => "  +001.23%+  001.23%1.2346%1.23"
    (dtest -12.3456) => "  -012.35%-  012.35%-12.3456%-12.35"
    (dtest 5000.0)   => " +5000.00%+ 5000.00%5000.0000%5000.00"

    SEE ALSO
    CLtL 22:396, format, format directive ~D, format directive ~F, prin1


