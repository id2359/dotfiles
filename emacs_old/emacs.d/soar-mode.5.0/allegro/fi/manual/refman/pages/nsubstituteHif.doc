
                                                              nsubstitute-if


    FUNCTION
    nsubstitute-if  -  change a sequence by substituting a new element for
      old ones that satisfy a test (destructive)

    Usage
    nsubstitute-if NEWITEM PRED SEQUENCE [:key KEYFNC] [:count COUNT]
      [:from-end FE] [:start SN] [:end EN]

    SIDE EFFECTS
    The argument SEQUENCE may be changed.

    DESCRIPTION
    Returns a sequence of the same  type  as  SEQUENCE  after  destructively
    replacing  those  elements  that  satisfy a predicate with NEWITEM.  The
    predicate, PRED, must accept one argument.  If PRED applied to  an  ele-
    ment in SEQUENCE returns true, the element is replaced.  If PRED returns
    false, the item is not changed.  This  is  the  destructive  version  of
    substitute-if.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number of items changed.  No more than that number of elements will
    be changed.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified   or  nil,  KEYFNC  effectively  defaults  to  the  function
    identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the  reverse  direction.  This argument defaults to nil.  It
    affects the result only if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be replaced.

    (Note that, depending on the  implementation,  SEQUENCE  itself  may  be
    returned  after  being  modified,  SEQUENCE  may be modified and another
    sequence returned, or SEQUENCE may be  unchanged  and  another  sequence
    returned.)

    EXAMPLES
    (setq my-sequence '((a) (b) c d (e)))
    ;;  Since the argument to NSUBSTITUTE-IF may not itself change,
    ;;  you  should use SETQ, as in the following.
    (setq my-sequence (nsubstitute-if 'a #'atom my-sequence)) => ((a) (b) a a (e))
    my-sequence => ((a) (b) a a (e))
    my-sequence => ((a) (b) a a (e))
    (nsubstitute-if 2 #'oddp '(1 2 3 4 5 6 7)
      :count 3) => (2 2 2 4 2 6 7)
    (nsubstitute-if 'a #'evenp '(1 2 3 4 5 6 7)
                    :count 2) => (1 a 3 a 5 6 7)
    (nsubstitute-if 'a #'oddp '(1 2 3 4 5 6 7 8 9)
      :start 2 :end 6) => (1 2 a 4 a 6 7 8 9)

    SEE ALSO
    CLtL 14:256, :end, :key, nsubst, nsubst-if, nsubst-if-not, nsubstitute,
    nsubstitute-if-not, :start, subst, subst-if, subst-if-not, substitute,
    substitute-if, substitute-if-not





















































































































































































































































































































































































































































































































































































































