
                                                                 position-if


    FUNCTION
    position-if  -  locate an element in a sequence that satisfies a predi-
      cate

    Usage
    position PRED SEQUENCE [:key KEYFNC] [:from-end FE] [:start SN]
      [:end EN]

    DESCRIPTION
    Returns the index of the leftmost element  in  SEQUENCE  that  satisfies
    PRED.   The argument PRED must be a predicate that accepts one argument.
    PRED is satisfied if it returns true.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the reverse direction and the index of the rightmost element
    satisfying PRED is returned.  This argument defaults to nil.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (position-if #'characterp '(1 2 #\a #\b 4 #\d)) => 2
    (position-if #'characterp '(1 2 3 4 5)) => nil
    (position-if #'characterp '(1 2 #\a 3 4 #\a 5)
                 :from-end t) => 5
    (position-if #'oddp '(1 2 4 6 8 12 7 8 14 6)
                 :start 3 :end 7) => 6

    SEE ALSO
    CLtL 14:257, :end, find-if, :key, member-if, position, position-if-not,
    :start












































































































































































































































































































































































































































































































































































































































