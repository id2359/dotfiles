
                                                               substitute-if


    FUNCTION
    substitute-if  -  substitute a new element for old sequence elements
      that satisfy a test

    Usage
    substitute-if NEWITEM PRED SEQUENCE [:key KEYFNC] [:from-end FE]
      [:count COUNT] [:start SN] [:end EN]

    DESCRIPTION
    Returns a copy of SEQUENCE after replacing those elements that satisfy a
    predicate  with NEWITEM.  The predicate, PRED, must accept one argument.
    If PRED applied to an element in SEQUENCE returns true, the  element  is
    replaced.  If PRED returns false, the element is not changed.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified   or  nil,  KEYFNC  effectively  defaults  to  the  function
    identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the  reverse  direction.  This argument defaults to nil.  It
    affects the result only if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be replaced.

    EXAMPLES
    (substitute-if 2 #'atom '((a) (b) c d (e)))
      => ((a) (b) 2 2 (e))
    (substitute-if 'a #'oddp '(1 2 3 4 5 6 7) :count 3)
      => (a 2 a 4 a 6 7)
    (substitute-if 'a #'evenp '(1 2 3 4 5 6 7) :count 2
      :from-end t) => (1 2 3 a 5 a 7)
    (substitute-if 'a #'oddp '(1 2 3 4 5 6 7 8 9) :start 2 :end 6)
      => (1 2 a 4 a 6 7 8 9)

    SEE ALSO
    CLtL 14:255, :end, :key, nsubst, nsubst-if, nsubstitute, nsubstitute-if,
    nsubstitute-if-not, nsubst-if-not, :start, subst, subst-if, subst-if-
    not, substitute, substitute-if-not







































































































































































































































































































































































































































































































































































































































