
                                                               delete-if-not


    FUNCTION
    delete-if-not  -  change a sequence by deleting all elements that do not
      satisfy a predicate (destructive)

    Usage
    delete-if-not PRED SEQUENCE [:key KEYFNC] [:count CNT] [:from-end FE]
      [:start SN] [:end EN]

    SIDE EFFECTS
    The argument SEQUENCE may be changed.

    DESCRIPTION
    Returns a sequence of the same type as SEQUENCE from which all  elements
    not  satisfying  the  predicate PRED have been removed.  An element does
    not satisfy PRED if PRED returns false  when  applied  to  the  element.
    This is the destructive version of remove-if-not.  (Note that, depending
    on the implementation, SEQUENCE itself  may  be  returned,  after  being
    modified,  SEQUENCE  may  be  modified and another sequence returned, or
    SEQUENCE may be unchanged and another sequence returned.)

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number of items removed.  No more than that number of elements will
    be deleted.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in the reverse direction.  The default value of this argument is
    nil.  This argument affects the result only if used in conjunction  with
    :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (delete-if-not #'numberp '(1 2 3 d 5)) => (1 2 3 5)
    (delete-if-not #'numberp '((1) (2) (3) (d) (5)) :key #'car)
      => ((1) (2) (3) (5))
    (delete-if-not #'evenp '(1 2 3 4 5 6) :count 2)
       => (2 4 5 6)
    (delete-if-not #'oddp '(1 2 3 4 5 6) :count 2 :from-end t)
      => (2 4 5 6)
    (delete-if-not #'oddp '(1 2 3 4 5 6) :start 0 :end 4)
      => (1 3 5 6)

    SEE ALSO
    CLtL 14:254, delete, delete-duplicates, delete-if, :end, remove,
    remove-if-not, remove-duplicates, :start, :key





























































































































































































































































































































































































































































































































































































































