
                                                                      search


    FUNCTION
    search  -  search one sequence for another one contained in it

    Usage
    search SEQUENCE1 SEQUENCE2 [{:test | :test-not} PRED] [:key KEYFNC]
      [:from-end FE] [:start1 SN1] [:end1 EN1] [:start2 SN2] [:end2 EN2]

    DESCRIPTION
    Returns the index into SEQUENCE2 of the leftmost element of the leftmost
    subsequence  that  elementwise  matches SEQUENCE1.  If no subsequence of
    SEQUENCE2 matches SEQUENCE1, search returns nil.  By  default,  matching
    is done using eql elementwise.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that accepts two arguments (an element of SEQUENCE1 and an
    element  of  SEQUENCE2  passed  in that order).  If PRED is the value of
    :test, the elements match if PRED returns true.  If PRED is the value of
    :test-not,  the elements match if PRED returns false.  It is an error to
    supply both :test and :test-not keyword arguments.

    If the keyword argument :key is specified and KEYFNC is not nil,  KEYFNC
    must  be  a  function  that accepts one argument.  It will be applied to
    each element of SEQUENCE1 and SEQUENCE2 before that element  is  tested.
    If nil or unspecified, it effectively defaults to the function identity.

    To process SEQUENCE2 in the reverse direction, specify a  non-nil  value
    for  the :from-end keyword argument.  In this case, search looks for the
    rightmost subsequence of SEQUENCE2 that matches SEQUENCE1,  and  returns
    the index of the leftmost element of this subsequence of SEQUENCE2.  The
    value of this argument defaults to nil.

    To operate on a subsequence of SEQUENCE1, use the :start1 and :end1 key-
    words.   The  :start1  keyword argument indicates the index of the first
    element of the subsequence of SEQUENCE1 to examine.  Its value  defaults
    to  zero  (indicating  the  first  element).  The :end1 keyword argument
    specifies an index one greater than the index of  the  last  element  of
    SEQUENCE1  to examine.  A value of nil is equivalent to the default, the
    length of the sequence.  Note that if SEQUENCE1 is a vector with a  fill
    pointer,  only  the active elements of SEQUENCE1 can be examined.  These
    remarks also apply to :start2 and :end2, which specify the starting  and
    ending indices for the elements to examine in SEQUENCE2.

    EXAMPLES
    (search '(a b c) '(1 2 a b c 3 4 5)) => 2
    (search '(a b c) '(d e f g)) => nil
    (search '((a b c)) '((d e f) (a b c)) :test #'equal) => 1
    (search '(c b a) '(f e d c b a g) :from-end t) => 3
    (search '(a b c d e f) '(1 2 3 a b c 4 5 d e f)
            :start1 1 :end1 2 :start2 2 :end2 7) => 4

    SEE ALSO
    CLtL 14:258, :end, :key, mismatch, :start, :test, :test-not

































































































































































































































































































































































































































































































































































































































