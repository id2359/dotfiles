
                                                              set-difference


    FUNCTION
    set-difference  -  create a new list using elements of one list not in
      another list

    USAGE
    set-difference list1 list2 [{:test | :test-not} pred] [:key keyfnc]

    DESCRIPTION
    Returns a list whose elements are those of LIST1 that do not  appear  in
    LIST2.  Precisely, the returned list contains every element of LIST1 for
    which there is no eql element in LIST2.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that accepts two arguments (an element  of  LIST1  and  an
    element of LIST2, passed in that order).  If PRED is the value of :test,
    the elements match if PRED returns  true.   If  PRED  is  the  value  of
    :test-not,  the elements match if PRED returns false.  It is an error to
    supply both :test and :test-not keyword arguments.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of both lists before the  elements  are  tested.
    When  unspecified  or  nil,  it  effectively  defaults  to  the function
    identity.

    The resulting list may be eq to, or  share  entries  with,  LIST1.   The
    order  of  its elements is not defined.  The destructive version of this
    function is nset-difference.

    EXAMPLES
    (set-difference '(1 2 3) '(4 5 6)) => (3 2 1)
    (set-difference '(1 2 3) '(2 3 4)) => (1)
    (set-difference '(1 2 3 3) '(2 4)) => (3 3 1)
    (set-difference '(-3 -2 -1 0 1 2 3) '(-2 1) :test #'<)
      => (3 2 1)
    (set-difference '((a 1) (b 2)) '((b 3) (c 4)) :key #'car)
      => ((a 1))
    (set-difference '(a b c) '(d e f) :test-not #'equal) => nil
    (set-difference '(a b c) '(a b) :test-not #'equal) => nil
    (set-difference '(a b c) '(a) :test-not #'equal) => (a)

    SEE ALSO
    CLtL 15:278, intersection, :key, member, nintersection, nset-difference,
    nset-exclusive-or, set-exclusive-or, subsetp, :test, :test-not, union

















