
                                                                         map


    FUNCTION
    map  -  map a function onto one or more sequences

    Usage
    map RESULT-TYPE FUNCTION {SEQUENCE}+

    DESCRIPTION
    Returns a sequence of type RESULT-TYPE created  in  the  following  way.
    The  function FUNCTION is applied to all the first (index 0) elements of
    the argument SEQUENCES, passed in the order in which the  sequences  are
    specified.  The result is the first element of the result sequence.  The
    second element is the result of applying  FUNCTION  to  all  the  second
    (index 1) elements of the argument sequences, and so on until the end of
    the shortest argument sequence is reached.  The returned  sequence  will
    have as many entries as the shortest sequence.  If any sequence argument
    has more elements than the shortest, those elements are ignored.

    RESULT-TYPE must be a type specifier denoting  a  subtype  of  sequence.
    FUNCTION  must  return  values  that  are  of  a  type  appropriate  for
    RESULT-TYPE.  If RESULT-TYPE is specified as nil, nil is  returned  (and
    map is presumably being used for its side effects).

    The argument FUNCTION must be a function that accepts as many  arguments
    as  there  are argument sequences.  If FUNCTION returns multiple values,
    only the first is included in the result sequence.

    EXAMPLES
    (map 'list #'- '(1 2 3 4)) => (-1 -2 -3 -4)
    (map 'list #'+ '(1 2 3 4) '(1 2 3)) => (2 4 6)
    (map '(vector single-float) #'float '(1 2 3))
       => #(1.0 2.0 3.0)

    SEE ALSO
    CLtL 14:249, mapc, mapcan, mapcar, maphash, mapl, maplist




















































































































































































































































































































































































































































































































































































































































