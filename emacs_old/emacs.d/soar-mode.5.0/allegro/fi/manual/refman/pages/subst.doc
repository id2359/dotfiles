
                                                                       subst


    FUNCTION
    subst  -  copy tree replacing items which compare to a given item

    Usage
    subst NEWITEM OLDITEM TREE [{:test | :test-not} PRED] [:key KEYFNC]

    DESCRIPTION
    Returns a copy of TREE in which every subtree or leaf (car  or  cdr)  at
    all  levels  testing  eql  to OLDITEM is replaced by NEWITEM.  While the
    argument TREE is not changed, the returned tree may share parts with it.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that accepts two arguments (OLD-ITEM  and  an  element  of
    TREE,  passed  in  that order).  If PRED is the value of :test, OLD-ITEM
    and the element match if PRED returns true.  If PRED  is  the  value  of
    :test-not,  OLD-ITEM and the element match if PRED returns false.  It is
    an error to supply both :test and :test-not keyword arguments.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of TREE before that  element  is  tested.   When
    unspecified or nil, it effectively defaults to the function identity.

    EXAMPLES
    (subst 'x 'a '(a (b a (a) c))) => (x (b x (x) c))
    (subst 'x nil '(a (b a (a) c))) => (a (b a (a . x) c . x) . x)
    (subst '(x) '(a b) '(a b a b) :test #'equal) => (a b x)

    SEE ALSO
    CLtL 15:273, subst-if, nsubst, nsubst-if, nsubst-if-not, nsubstitute,
    nsubstitute-if, subst-if-not, substitute, substitute-if-not






















































































































































































































































































































































































































































































































































































































































