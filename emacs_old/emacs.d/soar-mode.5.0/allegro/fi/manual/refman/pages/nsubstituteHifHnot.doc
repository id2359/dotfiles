
                                                          nsubstitute-if-not


    FUNCTION
    nsubstitute-if-not  -  change a sequence by substituting a new element
      for ones that fail a predicate (destructive)

    Usage
    nsubstitute-if-not NEWITEM PRED SEQUENCE [:key KEYFNC] [:count CNT]
      [:from-end FE] [:start SN] [:end EN]

    SIDE EFFECTS
    The argument SEQUENCE may be changed.

    DESCRIPTION
    Returns a sequence of the same  type  as  SEQUENCE  after  destructively
    replacing  those  elements that do not satisfy a predicate with NEWITEM.
    The predicate, PRED, must accept one argument.  If PRED  applied  to  an
    element  in  SEQUENCE  returns  false, the element is replaced.  If PRED
    returns true, the item is not changed.  This is the destructive  version
    of substitute-if-not.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number of items changed.  No more than that number of elements will
    be changed.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified   or  nil,  KEYFNC  effectively  defaults  to  the  function
    identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the  reverse  direction.  This argument defaults to nil.  It
    affects the result only if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE  can be replaced.  (Note that, depending on the implementation,
    SEQUENCE itself may be returned after being modified,  SEQUENCE  may  be
    modified and another sequence returned, or SEQUENCE may be unchanged and
    another sequence returned.)

    EXAMPLES
    (setq my-sequence '((a) (b) c d (e)))
    ;;  Since the argument to NSUBSTITUTE-IF-NOT may not itself change,
    ;;  you  should use SETQ, as in the following.
    (setq my-sequence (nsubstitute-if-not 'a #'atom my-sequence))
      => (a a c d a)
    my-sequence => (a a c d a)
    (nsubstitute-if-not 'a #'atom
      => (a a c d a)
    (nsubstitute-if-not 2 #'oddp '(1 2 3 4 5 6 7 8)
                        :count 3) => (1 2 3 2 5 2 7 8)
    (nsubstitute-if-not 'a #'evenp '(1 2 3 4 5 6 7)
                        :count 2 ) => (a 2 a 4 5 6 7)
    (nsubstitute-if-not 'a #'oddp '(1 2 3 4 5 6 7 8 9)
                        :start 2 :end 6)
       => (1 2 3 a 5 a 7 8 9)

    SEE ALSO
    CLtL 14:256, :end, :key, nsubst, nsubst-if, nsubst-if-not, nsubstitute,
    nsubstitute-if, :start, subst, subst-if, subst-if-not, substitute,
    substitute-if, substitute-if-not




















































































































































































































































































































































































































































































































































































































