
                                                             position-if-not


    FUNCTION
    position-if-not  -  locate an element in a sequence that fails a test in
      a sequence

    Usage
    position-if-not PRED SEQUENCE [:key KEYFNC] [:from-end FE] [:start SN]
      [:end EN]

    DESCRIPTION
    Returns the index of the leftmost element in SEQUENCE that  fails  PRED.
    The  argument  TEST  must  be a predicate that accepts one argument.  An
    argument fails PRED if PRED returns false when applied to that argument.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the reverse direction and the index of the rightmost element
    failing PRED is returned.  This argument defaults to nil.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (position-if-not #'characterp '(1 2 #\a #\b 4 d)) => 0
    (position-if-not #'characterp '(#\a #\b #\c #\d e)) => 4
    (position-if-not #'characterp '(1 2 #\a 3 4 9 #\a)
                     :from-end t) => 5
    (position-if-not #'oddp '(1 2 5 7 11 13 7 8 9 17)
                     :start 3 :end 7) => nil

    SEE ALSO
    CLtL 14:257, :end, :key, find-if-not, member-if-not, position,
    position-if, :start












































































































































































































































































































































































































































































































































































































































