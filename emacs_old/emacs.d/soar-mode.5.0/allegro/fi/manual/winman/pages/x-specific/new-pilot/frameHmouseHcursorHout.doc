
                                                      frame-mouse-cursor-out


    METHOD
    frame-mouse-cursor-out  -  respond to a mouse-cursor-out event

    Usage
    frame-mouse-cursor-out WSTREAM MOUSE-STATE [TRANSITION]

    DESCRIPTION
    The system calls this method whenever the mouse cursor  moves  from  the
    frame  of  WSTREAM to the outside of the window.  (No event is generated
    when the cursor moves from the frame into the mat or inner region of the
    window.)  WSTREAM  must be a window-stream.  Mouse cursor out events are
    also called `cursor out' or `exit' events.

    You do not (normally) call this method directly.  Instead, you add  your
    own  functions  to  the  list of functions called by this method.  Those
    functions must have the same lambda list (that is, take the  same  argu-
    ments in the same order) as the method itself.

    A mouse-cursor-out event can only be generated if the mouse is leaving a
    portion  of  the  frame  that is not occluded (covered) by other windows
    (active-regions cannot cover  the  frame).   Note  here  that  `exiting'
    includes  moving to a region occupied by another object even though that
    region is on top of the (occluded) frame.  For example, suppose we  have
    another  window  lying  over the frame.  An exit event will be generated
    for the frame when the cursor passes from the frame into the other  win-
    dow.

    The scroll bar facility uses the frame-mouse-cursor-out method to put up
    the  scroll bars, so care should be used when modifying this method on a
    window on which scroll bars are or are about to be enabled.  When scroll
    bars are enabled with enable-window-stream-extent-scrolling, the list of
    functions called by this method is replaced entirely, and any  functions
    you may have added are lost.  When scroll bars are totally disabled with
    disable-window-stream-extent-scrolling, the  list  is  restored  to  its
    default  state,  again  removing any functions you may have added to the
    list.  The examples below show what happens when scroll bars are enabled
    and  disabled.   For most of the rest of this discussion, we will assume
    scroll bars are not an issue.

    The  argument  MOUSE-STATE  is  a  mouse-state  and  the  the   argument
    TRANSITION   is   an  integer  representing  a  mouse  event.   For  the
    frame-mouse-cursor-out method, the value of the TRANSITION  argument  is
    the  value  of  the  constant  *mouse-cursor-in-event*.  The MOUSE-STATE
    argument records the mouse state when the  enter  event  occurred.   The
    position  component of MOUSE-STATE is the position of the mouse, in phy-
    sical coordinates of WSTREAM, at the  time  the  event  occurred.   (The
    position  will  be  outside  the  frame  and the window, of course.) The
    button-state component tells you what mouse and special keyboard buttons
    were  down  when  the  even  occurred.  Functions you add to the list of
    functions called by the method should use the information in  the  argu-
    ments as necessary to achieve the desired result.


    Note, button up events are caught by the  same  mouse  sensitive  object
    that  caught  the  button  down  event, and only that object catches any
    mouse events while the button is down.  Therefore, if you depress a but-
    ton  while in the inner region of a window and move the cursor right out
    of the window and the frame while keeping  the  button  down,  no  frame
    events  are generated at all and in particular, no frame exit event.  If
    you depress a button while in the frame and move the mouse cursor out of
    the  window, you will get a frame exit event.  When you release the but-
    ton, no matter where, the frame will catch the button up event as well.

    The TRANSITION argument is useful only when you  are  writing  functions
    that  will be added to several different kinds of methods (mouse-cursor-
    in, mouse-cursor-out, left-button-down, and so on).  Obviously,  if  you
    are  writing  a  function  that  will  only  be  added  to  the list for
    frame-mouse-cursor-out, you do not need to look at the TRANSITION  argu-
    ment  to  know  that it was a mouse-cursor-out event that happened.  You
    must allow for the TRANSITION argument in any function that you  add  to
    the  method  since that function will be called by the system with three
    arguments.  If you call this method  directly,  however,  (not  a  usual
    thing, but certainly permitted), you need not specify the third argument
    since it is optional.

    When the mouse cursor leaves the frame of WSTREAM, the system calls this
    method,  which in turn calls all the functions, in order, in the list of
    functions returned by window-stream-frame-mouse-cursor-out.   Initially,
    the  list  contains  the  single  function  default-window-stream-mouse-
    cursor-out-method, which is a null  function  (its  only  action  is  to
    return  nil),  so  no  action results from a mouse-cursor-out event on a
    window-stream or unless you modify the method  for  that  window-stream.
    You  add  functions to and remove them from the list with modify-window-
    stream-method.  You can also replace the entire list by using  setf  and
    the  function  window-stream-frame-mouse-cursor-in.  You can restore the
    list to its initial  state  (that  is,  to  do  nothing)  with  restore-
    default-window-stream-method.   (Do  NOT  use  this  function  if extent
    scrolling is enabled, for restoring the list to its default  state  will
    disable  scrolling as well as removing any functions you may have added.
    Remove functions with modify-window-stream-method instead.)

    The frame-mouse-cursor-out method returns what is returned by  the  last
    function  in  the  list of functions called by the method.  If this list
    has not been changed  from  its  initial  value,  frame-mouse-cursor-out
    returns nil.

    EXAMPLES
    ;;  We show the interaction of extent scrolling
    ;;  and the FRAME-MOUSE-CURSOR-OUT-METHOD.  To do this,
    ;;  we make a window, and examine the list of functions
    ;;  called after enabling and disbaling scrolling.
    (setf *my-win*
          (make-window-stream :left 100 :bottom 200
                              :width 100 :height 100
                              :activate-p t))
    ;;  The list contains one function.
    (window-stream-frame-mouse-cursor-out *my-win*)
      =>(default-window-stream-frame-mouse-cursor-out-method)

    ;;  We enable extent scrolling on *MY-WIN*.
    ;;  This changes the list.
    (enable-window-stream-extent-scrolling *my-win*)
    (window-stream-frame-mouse-cursor-out *my-win*)
      => (x-common-windows::maybe-pop-up-scroll-bar)

    ;;  We add another function to the list.
    (defun my-after-frame-mouse-cursor-out (wstream mouse-state event)
      (declare (ignore event))
          (format  *standard-output*
                   "Position: ~S ~% "
                   (mouse-state-position mouse-state)))

    (modify-window-stream-method *my-win* :frame-mouse-cursor-out
                                  :after 'my-after-frame-mouse-cursor-out)

    ;;  The list now contains two functions.
    (window-stream-frame-mouse-cursor-out *my-win*)
      => (x-common-windows::maybe-pop-up-scroll-bar
              my-after-frame-mouse-cursor-out)

    ;;  We disable scrolling, losing our own function in the process.
    (disable-window-stream-extent-scrolling *my-win*)
    (window-stream-frame-mouse-cursor-out *my-win*)
      => (default-window-stream-frame-mouse-cursor-out-method)

    ;;  We add our function again.
    (modify-window-stream-method *my-win* :frame-mouse-cursor-out
                                  :after 'my-after-frame-mouse-cursor-out)
    (window-stream-frame-mouse-cursor-out *my-win*)
      => (default-window-stream-frame-mouse-cursor-out-method
              my-after-frame-mouse-cursor-out)

    ;;  Since scrolling is disabled, we can use
    ;;  RESTORE-DEFAULT-WINDOW-STREAM-METHOD to return
    ;;  to the initial state.
    (restore-default-window-stream-method *my-win*
      :frame-mouse-cursor-out)
    (window-stream-frame-mouse-cursor-out *my-win*)
      => (default-window-stream-frame-mouse-cursor-out-method)

    SEE ALSO
    disable-window-stream-event-scrolling, enable-window-stream-event-
    scrolling, frame-left-button-down, frame-left-button-up, frame-middle-
    button-down, frame-middle-button-up, frame-mouse-cursor-in, frame-
    mouse-cursor-move, frame-right-button-down, frame-right-button-up,
    window-stream-frame-mouse-cursor-in


























































































































































































































































































































































































































































































































