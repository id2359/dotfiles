
                                                     math:concatenate-matrix


    FUNCTION
    concatenate-matrix  -  get the complex conjugate of a number

    USAGE
    concatenate-matrix matrices [:by r-or-c]

    DESCRIPTION
    Returns a matrix that is the result of concatenating all the matrices in
    the  list  MATRICES  together.   The  concatenation is done by rows (the
    number of rows stays the same, but each row is longer) or  columns  (the
    number of columns stays the same but each column is longer) according to
    the value of the :by keyword argument, described in the  last  paragraph
    below.

    MATRICES must be a single matrix or a non-empty list of matrices.  If it
    is  a  single  matrix,  that  matrix  is  returned.   If it is a list of
    matrices, each must have the same number of either rows  (if  concatena-
    tion  is  by  rows)  or  columns  (if concatenation is by columns).  For
    illustration, let us assume that concatenation is by rows.  The  result-
    ing  matrix,  which is a new matrix that does not share storage with any
    matrix in the list, will have the same number of rows.  The first row of
    the  result  matrix will be the concatenation (as if with the Lisp func-
    tion concatenate) of the first rows of the matrices in  the  list.   The
    second  row  will  be  the  concatenation of the second rows, and so on.
    (Note the difference between MATRICES being a single matrix and  a  list
    of  one  matrix.   In the first case, the single matrix is returned.  In
    the second case, a new matrix which is a copy of the  single  matrix  in
    the  list  is returned.  If all you want is a copy of a matrix, however,
    copy-matrix is more efficient.)

    Note for new Lisp users.  If you  give  a  list  as  the  value  of  the
    MATRICES  argument,  you  cannot  specify a quoted list of symbols whose
    values are matrices; the list  must  contain  the  matrices  themselves.
    Thus if mat1 and mat2 are symbols whose values are matrices,
    (concatenate-matrix '(mat1 mat2))
    will cause an error.  The correct form is
    (concatenate (list mat1 mat2))

    The keyword argument :by controls whether concatenation is done by  rows
    or  by  columns.  The two possible values for the :by argument are :rows
    (the default) and :columns.  Concatenation is done by rows or columns as
    the value is :rows or :columns.

    EXAMPLES
    (setq mat1 (make-matrix '((1.1 1.2 1.3) (2.1 2.2 2.3))))
      => #2a((1.1 1.2 1.3) (2.1 2.2 2.3))
    (setq mat2 (make-matrix '((-0.1 -0.2 -0.3))))
      => #2a((-0.1 -0.2 -0.3))
    (setq mat3 (make-matrix '((100.1) (200.2))))
      => #2a((100.1) (200.2))
    (print-matrix mat1) PRINTS
       1.1 1.2 1.3
       2.1 2.2 2.3
    (print-matrix mat2) PRINTS
       -0.1 -0.2 -0.3
    (print-matrix mat3) PRINTS
       100.1
       200.2
    (print-matrix (concatenate-matrix (list mat1 mat3))) PRINTS
       1.1   1.2   1.3   100.1
       2.1   2.2   2.3   200.2
    (print-matrix (concatenate-matrix (list mat1 mat2)
                                      :by :columns)) PRINTS
       1.1  1.2  1.3
       2.1  2.2  2.3
       -0.1 -0.2 -0.3
    (concatenate-matrix (list mat1 mat2) :by :rows) => ERROR
    ;;
    ;;  The matrices do not have the same number of rows.
    ;;  The error message is:
    ;;  Error: Incompatible matrices passed to CONCATENATE-MATRIX

    SEE ALSO
    copy-matrix






















































