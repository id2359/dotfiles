
                                                                        :end


    KEYWORD ARGUMENT
    :end  -  specify the end of a subsequence to be operated upon

    Usage
    :end INTEGER

    DESCRIPTION
    This keyword argument is used with many sequence-manipulation functions.
    Its  value  is the index of the first element after the subsequence upon
    which the function is to act.  The default value of this  keyword  argu-
    ment  is  the  length  of  the sequence. Since sequences use zero-origin
    indexing (that is, the first element is index zero), the  default  value
    for the :end argument indicates that the operation should run to the end
    of the sequence.  A value of nil is also interpreted to mean the  length
    of the sequence.  The value of the :end argument must be an non-negative
    integer less than or equal to the length of the sequence (or nil).

    The :end keyword argument is  normally  used  in  conjunction  with  the
    :start  keyword argument.  The :start argument denotes the first element
    of the subsequence.  Thus, the subsequence starts at the  value  of  the
    :start  argument  and  ends at the element before the value of the :end.
    Note that the value of :start must be less than or equal to the value of
    the  :end argument.  (If they are equal, the empty subsequence is speci-
    fied.) It is an error for the value of the :start argument to be greater
    than the value of the :end argument.  (The :from-end keyword argument is
    used to process the sequence in the reverse direction.)

    While effects similar to using :start and :end arguments can be achieved
    by  applying  subseq  to  a  sequence  argument, there are two important
    differences.  When the :start and :end arguments are used,  all  indices
    are  relative  to  the original sequence, while they are relative to the
    subsequence if subseq is used.  And functions  that  return  a  sequence
    with  elements  modified (such as substitute and fill) return the entire
    sequence when the :start and  :end  arguments  specify  the  subsequence
    (with  elements  outside  the subsequence unchanged) and only the subse-
    quence when subseq is used.

    When there are two sequence arguments (as in  mismatch)  that  may  have
    subsequences  specified,  the  keyword  arguments  are labeled :end1 and
    :end2, with the :end1 argument referring to the first sequence  and  the
    :end2 argument referring to the second sequence.

    This argument is also used with certain string  functions  (for  example
    string-capitalize)  in  the  same  way  it is used with general sequence
    functions.  The list of functions that use :end (or :end1 and :end2)  is
    given below.

    EXAMPLES
    (fill '(0 1 2 3 4) 'a :start 1 :end 3) => (0 a a 3 4)
    (fill (subseq '(0 1 2 3 4) 1 3) 'a) => (a a)
    (fill '(0 1 2 3 4) 'a :end 3) => (a a a 3 4)
    (position 'a '(a 1 2 a 4) :start 1 :end 5) => 3
    (position 'a '(a 1 2 a 4) :start 1 :end nil) => 3
    (position 'a '(a 1 2 a 4) :start 1) => 3
    (position 'a (subseq '(a 1 2 a 4) 1 5)) => 2

    SEE ALSO
    CLtL 14:246, count, count-if, count-if-not, delete, delete-duplicates,
    delete-if, delete-if-not, fill, find, find-if, find-if-not, make-
    string-input-stream, mismatch, nstring-capitalize, nstring-downcase,
    nstring-upcase, nsubstitute, nsubstitute-if, nsubstitute-if-not, parse-
    integer, parse-namestring, position, position-if, position-if-not,
    read-from-string, reduce, remove, remove-duplicates, remove-if, remove-
    if-not, replace, search, string-capitalize, string-downcase, string-
    equal, string-greaterp, string-lessp, string-not-greaterp, string-not-
    lessp, string-upcase, string/=, string>, string>=, string=, string<,
    string<=, subseq, substitute, substitute-if, substitute-if-not, with-
    input-from-string, write-line, write-string


















































































































































































































































































































































































































































































































































































































