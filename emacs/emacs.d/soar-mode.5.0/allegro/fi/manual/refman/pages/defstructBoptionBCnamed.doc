
                                                     defstruct option :named


    DEFSTRUCT OPTION
    :named  -  specify that the structure is named

    Usage
    :named

    DESCRIPTION
    This is a defstruct option and is only  useful  for  structures  defined
    with  an explicit representational type.  Typed structures are not named
    unless the :named option is specified.  Structures defined  without  the
    :type  option  are  always named.  Being  `named' means that the name of
    the structure can be obtained from an instance of the structure.   Since
    structures  defined  without  the  :type  option define new types, it is
    always possible to determine the name of the structure (its  type)  from
    an  instance.   When a structure is defined with an explicit representa-
    tional type and the :named option is specified,  the  first  representa-
    tional element will be a symbol that is the structure name.

    When type-of is applied to an instance of a  structure  defined  without
    the :type option, the structure data type is returned.  For instances of
    structures with an explicit representational type, type-of  returns  the
    representational type.  A predicate can only be defined for named struc-
    tures.  For typed structures, the predicate function  will  first  check
    the  representational  type,  then  whether  the  first  element  of the
    instance contains the correct symbol.

    EXAMPLES
    (defstruct (fraction (:type (vector t))) ; not :named
      num denom) => fraction
    (setq f (make-fraction :num 2 :denom 3)) => #(2 3)
    (fraction-p f) => nil

    (defstruct (fraction :named (:type list))
      num denom) => fraction
    (setq a (make-fraction :num 2 :denom 3)) => (fraction 2 3)
    (fraction-p a) => t

    SEE ALSO
    CLtL 19:315, CLtL 19:318, defstruct, defstruct-option :conc-name,
    defstruct-option :constructor, defstruct option :copier, defstruct
    option :include, defstruct option :initial-offset, defstruct option
    :predicate, defstruct option :print-function, defstruct option :type




















