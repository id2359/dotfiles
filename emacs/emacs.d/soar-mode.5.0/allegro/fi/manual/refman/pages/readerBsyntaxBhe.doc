
                                                            reader syntax #.


    READER SYNTAX
    #.   -  representation of an object evaluated at read time

    Usage
    #.EXPR

    DESCRIPTION
    Reads as the object resulting from the evaluation of the expression fol-
    lowing.   The  expression  EXPR may be the printed representation of any
    LISP object, or a form that evaluates to a  LISP  object.   This  reader
    macro  may be used to read an object that has no printed representation,
    since the expression following ``#.'' is EVALUATED to produce the object
    read.

    Evaluation always occurs when the expression  is  read.   Contrast  this
    with the behavior of the ``#,'' reader macro.

    When a ``#.'' syntactic form is being read by  the  interpreter,  it  is
    indistinguishable from an expression preceded by ``#,''.  When compiling
    a file, however, the expression following ``#.''  is  evaluated  by  the
    compiler  when  it  reads it, whereas the expression following ``#,'' is
    evaluated when the compiled file is later loaded.  In a sense, the  syn-
    tactic  form  #.EXPR  is  similar  to  (eval-when  (eval compile) EXPR),
    whereas #,EXPR is similar to the form (eval-when (eval load) EXPR).

    Note that when #.EXPR appears in a form that is evaluated, the  EXPR  is
    effectively `evaluated twice.' It is evaluated when the reader evaluates
    it to produce a LISP object.  This  resulting  LISP  object  might  then
    evaluated again, unless it is, for example, within a quoted form.

    This syntactic form may be useful to create data structures at read time
    to avoid creating them at run time.  In general, computational resources
    are less of a concern when a form is being read or compiled than when it
    is being evaluated in a running program.

    EXAMPLES
    ;;  (The set of objects without readable printed representations is
    ;;  implementation-dependent, but hash-tables commonly have none.)
    (setf *h* '#.(make-hash-table))
      => #<EQL hash-table with 0 entries @ #x534f09>
    ;;  The expression below produces the same result as that above,
    ;;  but the hash-table is created when the expression is evaluated,
    ;;  not when it is read.
    (setf *h* (make-hash-table))
      => #<EQL hash-table with 0 entries @ #x535a12>

    ;;; Assume the following expressions are in a file.
    (eval-when (eval) (defparameter *mode* :eval))
    (eval-when (load) (defparameter *mode* :load))
    (eval-when (compile) (defparameter *mode* :read))
    (defun modes ()
      (values #.*mode* #,*mode*))

    ;;; When the file containing the above expressions is
    ;;;   loaded uncompiled, we observe this behavior:
    (modes) => :eval :eval

    ;;; When the same file is loaded compiled, we observe this:
    (modes) => :read :load




    SEE ALSO
    CLtL 22:355, about printing, about reading, eval-when, reader syntax #,































































