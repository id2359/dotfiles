
                                                                      sublis


    FUNCTION
    sublis  -  copy a tree replacing several different objects

    USAGE
    sublis a-list tree [{:test | :test-not} pred] [:key keyfnc]

    DESCRIPTION
    Returns a copy of TREE that has undergone  multiple  simultaneous  subst
    operations  as specified by the association list A-LIST.  This list con-
    sists of dotted pairs of the form (OLDITEM.  NEWITEM).  In the  returned
    tree,  every  subtree or leaf (car or cdr) at all levels that are eql to
    any OLDITEM is replaced by its corresponding NEWITEM.  While  the  argu-
    ment TREE is not changed, the returned tree may share parts with it.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that accepts two arguments (OLD-ITEM  and  an  element  of
    TREE,  passed  in  that  order).  If PRED is the value of :test, the two
    elements match if PRED returns true.  If PRED is the value of :test-not,
    the  two elements match if PRED returns false.  It is an error to supply
    both :test and :test-not keyword arguments.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of TREE before that  element  is  tested.   When
    unspecified or nil, it effectively defaults to the function identity.

    A simple version of sublis could be defined as follows:

    (defun simple-sublis (a-list tree pred)
      (let ((pair (assoc tree a-list :test pred)))
        (cond (pair
               (cdr pair))
              ((atom tree)
               tree)
              (t
               (cons (simple-sublis a-list (car tree) pred)
                     (simple-sublis a-list (cdr tree) pred))))))

    EXAMPLES
    (sublis '((a . 1) ( b . 2)) '(a (b a (b))))
      => (1 (2 1 (2)))
    (sublis '(((a 4) . (b 5)) ((c 6) . (d 8)))
      '((a 4) (p 11) (c 6) (m 2)) :test #'equal)
      => ((b 5) (p 11) (d 8) (m 2))

    SEE ALSO
    CLtL 15:274, nsublis, nsubst, nsubstitute, subst, substitute














