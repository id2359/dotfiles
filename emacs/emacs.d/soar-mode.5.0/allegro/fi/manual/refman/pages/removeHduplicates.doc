
                                                           remove-duplicates


    FUNCTION
    remove-duplicates  -  remove duplicate entries from a copy of a sequence

    Usage
    remove-duplicates SEQUENCE [{:test | :test-not} PRED] [:key KEYFNC]
      [:from-end FE] [:start SN ] [:end EN]

    DESCRIPTION
    Returns a copy of SEQUENCE with  all  duplicate  elements  deleted.   By
    default,  the  elements  of the sequence are compared pairwise with eql.
    If any two match, the one earlier  in  the  sequence  is  deleted.   The
    remaining elements will appear in their original relative order.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that accepts two  arguments  (two  elements  of  SEQUENCE,
    passed  in  the order they appear in SEQUENCE).  If PRED is the value of
    :test, the elements match if PRED returns true.  If PRED is the value of
    :test-not,  the elements match if PRED returns false.  It is an error to
    supply both :test and :test-not keyword arguments.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed in the reverse direction, thereby removing matching elements from
    the right, leaving the leftmost when the function  returns.   Note  that
    the  order  in which elements are passed to PRED is NOT affected by this
    argument.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (remove-duplicates '(a b b a c d)) => (b a c d)
    (remove-duplicates '((a) b (c) (a) d) :test #'equal)
      => (b (c) (a) d)
    (remove-duplicates  '((a) (b) (c) (a)) :key #'car)
      => ((b) (c) (a))
    (remove-duplicates  '(a b c a b) :from-end t) => (a b c)
    (remove-duplicates '(a b a a c d e a g) :start 1 :end 4)
      => (a b a c d e a g)

    SEE ALSO
    CLtL 14:254, delete-duplicates, eql, :key, remove, remove-if, remove-
    if-not, :test-not, :test, :end, :start
































































































































































































































































































































































































































































































































































































































