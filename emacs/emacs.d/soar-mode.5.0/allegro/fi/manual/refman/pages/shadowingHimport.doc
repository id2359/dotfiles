
                                                            shadowing-import


    FUNCTION
    shadowing-import  -  make symbols internal and place them on the
      shadowing-symbols list of a package

    Usage
    shadowing-import SYMBOLS [PACKAGE]

    SIDE EFFECTS
    The state of the package system is changed,  and  consistency  rules  no
    longer  hold.   Any  symbols  present in PACKAGE with the same name as a
    symbol in SYMBOLS  are  first  uninterned.   All  symbols  specified  by
    SYMBOLS  are  then  imported into PACKAGE, and the symbols are placed in
    the shadowing-symbols list of PACKAGE.

    DESCRIPTION
    Returns t, but this function is used for its side-effects.   SYMBOLS  is
    either  a  list  of  symbols  or  a single symbol.  PACKAGE is a package
    object and defaults to the current package (the value of *package*).

    This function is similar to import except that  NO  error  is  signalled
    even  if  there  are symbols already accessible in PACKAGE with the same
    names as any symbol in SYMBOLS.  If a symbol with a  name  identical  to
    the  name of a symbol in SYMBOLS is present in PACKAGE, it will be unin-
    terned before the corresponding symbol in SYMBOLS is imported.  All sym-
    bols  imported  are placed on the shadowing-symbols list of PACKAGE (see
    package-shadowing-symbols).  If a symbol in SYMBOLS is  already  present
    in PACKAGE, the symbol is just added to the shadowing-symbols list.

    Once a symbol is imported, it  becomes  accessible  in  PACKAGE  without
    package  qualification,  since it is now an internal symbol.  The symbol
    is not exported, but if it was already present in PACKAGE and  exported,
    it remains exported.  No property of an imported symbol is changed.  For
    example, its home package and its state in the package from which it was
    imported remain unaltered.

    Once a symbol is on the shadowing-symbols list for a package, name  con-
    flicts  caused  by using another package or by exporting a symbol from a
    used package will automatically (without error or warning)  be  resolved
    in  favor  of  the shadowing symbol.  Only explicitly importing a symbol
    with the same print name from another package will cause an error to  be
    signalled.

    Shadowing should be used with caution since  package  consistency  rules
    are not preserved across this operation.

    EXAMPLES
    (in-package :japan) => #<The JAPAN package>
    (intern "VCR") => vcr nil
    (setf vcr 'Sony) => sony
    (export '(vcr Sony)) => t
    (in-package :usa :use '(:japan :lisp))
      => #<The USA package>
    (find-symbol "VCR") => vcr :inherited
    vcr => sony
    (shadow 'vcr) => t
    (setf vcr 'Magnavox) => magnavox
    (find-symbol "VCR") => vcr :internal
    vcr => magnavox
    japan:vcr => sony
    (shadowing-import 'japan:vcr) => t
    vcr => sony
    (find-symbol "VCR") => vcr :internal
    (eq 'japan:vcr 'vcr) => t

    SEE ALSO
    CLtL 11:186, import, package-shadowing-symbols, *package*, shadow




















































































































































































































































































































































































































































































































































































































