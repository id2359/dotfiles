
                                                                      remove


    FUNCTION
    remove  -  remove all elements eql to a given item from a copy of a se-
      quence

    Usage
    remove ITEM SEQUENCE [{:test | :test-not} PRED] [:key KEYFNC] [:count
      CNT] [:from-end FE] [:start SN] [:end EN]

    DESCRIPTION
    Returns a copy of SEQUENCE after having removed  every  element  eql  to
    ITEM.

    A test predicate other than eql may be used by specifying  PRED  as  the
    value  of either the :test or the :test-not keyword argument.  PRED must
    be a function that  accepts  two  arguments  (ITEM  and  an  element  of
    SEQUENCE,  passed  in  that order).  If PRED is the value of :test, ITEM
    and the element match if PRED returns true.  If PRED  is  the  value  of
    :test-not,  ITEM  and the element match if PRED returns false.  It is an
    error to supply both :test and :test-not keyword arguments.

    Specifying an integer value for the :count  keyword  argument  restricts
    the  number of items removed.  No more than that number of elements will
    be replaced.  If this argument is unspecified or  nil,  all  appropriate
    elements will be removed.

    If the keyword argument :key is specified and its value  KEYFNC  is  not
    nil,  KEYFNC  must  be a function that accepts one argument.  It will be
    applied to each element of SEQUENCE before that element is tested.  When
    unspecified or nil, it effectively defaults to the function identity.

    If the :from-end keyword argument is specified non-nil, SEQUENCE is pro-
    cessed  in  the  reverse  direction.  This argument defaults to nil.  It
    affects the result only if used in conjunction with :count.

    To operate on a subsequence of SEQUENCE, specify  the  :start  and  :end
    keyword  arguments.   The :start keyword argument indicates the index of
    the first element of the subsequence to examine.  Its value defaults  to
    zero  (indicating  the first element).  The :end keyword argument speci-
    fies an index one greater than the index of the last element to examine.
    A value of nil is equivalent to the default, the length of the sequence.
    If SEQUENCE is a vector with a fill pointer, only the active elements of
    SEQUENCE can be examined.

    EXAMPLES
    (remove 'a '(a b c)) => (b c)
    (remove '(a) '((a) b c)) => ((a) b c)
    (remove '(a) '((a) b c) :test  #'equal) => (b c)
    (remove 'a '((b) (a) (b) (c)) :key #'cdr)
      => ((b) (a) (b) (c))
    (remove 'a '(a b a b a c) :count 2) => (b b a c)
    (remove 'a '(a b a b a c) :count 2 :from-end t)
      => (a b b c)
    (remove 'a '(a b a b a c) :start 2 :end 4)
      => (a b b a c)

    SEE ALSO
    CLtL 14:253, delete, delete-duplicates, :key, remove-duplicates,
    remove-if, remove-if-not, :test-not, :test, :end, :start, eql, equal




























































































































































































































































































































































































































































































































































































































