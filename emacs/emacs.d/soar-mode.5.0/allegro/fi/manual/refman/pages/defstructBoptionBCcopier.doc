
                                                    defstruct option :copier


    DEFSTRUCT OPTION
    :copier  -  customize a structure copier function

    Usage
    :copier [NAME]

    DESCRIPTION
    This is a defstruct option that controls whether a  copier  function  is
    defined,  and  its  name.   The default copier-function name is is copy-
    STRUCT, where STRUCT is the name of the structure.   Using  the  :copier
    keyword  argument  to  defstruct,  however, the user can specify his own
    name for the copier function.  If the argument  NAME  is  nil,  then  no
    copier function is defined for this structure.  If you do not supply the
    argument NAME, then the default copier function is used.  Otherwise NAME
    must  be  a  symbol, which is not evaluated, that names the copier func-
    tion.

    Whether or not the :copier keyword  option  is  used,  structure-copying
    functions do not make fresh copies of slot values, so that corresponding
    slot values of the old structure and the new structure are eql.

    EXAMPLES
    (defstruct (book (:copier clone-book)) title length) => book
    (setq my-book (make-book :title "Joy of Cooking" :length 400))
      => #s(book :title "Joy of Cooking" :length 400)
    (setq new-book (clone-book my-book))
      => #s(book :title "Joy of Cooking" :length 400)
    (setf (book-length new-book ) 1000)
    ;; Change both copies.
    (setf (subseq (book-title new-book) 7 11) "Read" )
    my-book => #s(book :title "Joy of Reading" :length 400)
    new-book => #s(book :title "Joy of Reading" :length 1000)

    (defstruct (magazine (:copier nil)) title) => magazine
    (setq my-mag (make-magazine :title 'Life))
      => #s(magazine :title Life)
    (title my-mag) => Life

    SEE ALSO
    CLtL 19:312, defstruct, defstruct-option :conc-name, defstruct-option
    :constructor, defstruct option :include, defstruct option :initial-
    offset, defstruct option :named, defstruct option :predicate, defstruct
    option :print-function, defstruct option :type, eql



















