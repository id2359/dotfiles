(require 'package)
(package-initialize)
(setq package-check-signature nil)
(setq package-archives '(
            ("melpa" . "https://melpa.org/packages/")
		 ("marmalade" . "http://marmalade-repo.org/packages/")
			 ("gnu" . "http://elpa.gnu.org/packages/")))

(require 'cl)
(setq make-backup-files nil)
(setq emacs-root (expand-file-name "~/.emacs.d/"))
(setq make-backup-files nil)
(global-set-key (kbd "C-a") 'mark-whole-buffer)

(defvar load-paths '(
		     "langs"
		     "settings"
		     "myutils"
		     "themes"
		     "work"
		     ))

(loop for location in load-paths
      do (add-to-list 'load-path (concat emacs-root location)))


(add-to-list 'default-frame-alist '(height . 45))
(add-to-list 'default-frame-alist '(width . 189))

(setq package-enable-at-startup nil)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar packages '(let-alist
		   cl
		   color-theme
		   auto-complete
		   virtualenvwrapper
		   projectile
		   exec-path-from-shell
		   flymake-easy
		   yapfify
		   epc
		   jedi
		   neotree
		   magit
		   base16-theme
		   tramp
		   python-pep8
		   py-autopep8
		   evil
		   flymake-python-pyflakes
		   python-pylint
		   material-theme
		   tuareg
		   ;;gnu-apl-mode
		   yasnippet
		   py-autopep8
		   evil-leader
		   paredit
		   evil-paredit
		   slime
		   ;;julia-mode
		   ensime
		   ;;haskell-mode
		   ;;scala-mode
		   flycheck
		   typescript-mode
		   js2-mode
		   json-mode
		   web-mode
		   web-beautify
		   exec-path-from-shell
		   feature-mode
		   helm
		   slime
		   base16-theme))

(defvar all-packages-installed t)
(dolist (p packages)
  (unless (package-installed-p p)
    (setq all-packages-installed nil)))

(unless all-packages-installed
  (dolist (p packages)
    (unless (package-installed-p p)
      (package-install p))))

;; settings
;; octave

(autoload 'octave-mode "octave-mod" nil t)
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode) auto-mode-alist))
		     

(autoload 'clips-mode "clips-mode" nil t)
(setq auto-mode-alist
     (cons '("\\.clp" . clips-mode) auto-mode-alist))

(setq auto-mode-alist
     (cons '("\\.newlisp" . newlisp-mode) auto-mode-alist))

;; autopep8 - not sure I want it always
(require 'py-autopep8)
;;(add-hook 'python-mode-hook 'py-autopep8-enable-on-save)

;; Set your lisp system and, optionally, some contribs
(setq inferior-lisp-program "sbcl")
(setq slime-contribs '(slime-fancy))

(require 'pymacs)
(require 'mysettings)
(require 'myutils)
(require 'mykeybindings)
;(require 'base16-theme)
;(require 'base16-default-dark-theme)
(require 'django-html-mode)
;(require 'js-beautify)
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)


(require 'flymake-python-pyflakes)
(add-hook 'python-mode-hook 'flymake-python-pyflakes-load)

(autoload 'gmpl-mode "gmpl-mode" nil t)
(setq auto-mode-alist
     (cons '("\\.model" . gmpl-mode) auto-mode-alist))

(setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
        '(javascript-jshint)))

(flycheck-add-mode 'javascript-eslint 'web-mode)

(setq-default flycheck-temp-prefix ".flycheck")

(setq-default flycheck-disabled-checkers
    (append flycheck-disabled-checkers
    '(json-jsonlist)))


;; (autoload 'sml-poly-ml "sml-poly-ml" "Set up and run Poly/ML." t)

;; in your .emacs file. If you only ever use Poly/ML then you might as
;; well put something like

(setq sml-mode-hook
      '(lambda() "SML mode defaults to Poly/ML"
	 (define-key  sml-mode-map "\C-cp" 'sml-poly-ml)))

;; for your sml-mode-hook. The command prompts for the program name
;; and the database to use, if any. 

;; pep8 options
(setq py-autopep8-options '("--max-line-length=120"))

;; install this manually

(add-to-list 'load-path (concat emacs-root "evil"))

(require 'evil)
(evil-mode 1)
(show-paren-mode)



(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

(setq frame-title-format
      (list (format "emacs %s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

  
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))

(when (eq system-type 'darwin)
  (add-to-list 'load-path "/Applications/Macaulay2-1.6/share/emacs/site-lisp")
  (load "M2-init")
  (global-set-key [f12] 'M2))
;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
;; ## end of OPAM user-setup addition for emacs / base ## keep this line
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("5a7830712d709a4fc128a7998b7fa963f37e960fd2e8aa75c76f692b36e6cf3c" default)))
 '(package-selected-packages
   (quote
    (helm feature-mode web-mode json-mode js2-mode flycheck haskell-mode ensime julia-mode slime evil-paredit paredit evil-leader yasnippet gnu-apl-mode tuareg material-theme python-pylint evil py-autopep8 python-pep8 base16-theme magit neotree jedi epc exec-path-from-shell projectile auto-complete color-theme))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
